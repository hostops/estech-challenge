/*
 * WPCEM API
 * WPCEM API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * not an ignored comment
 */
@Schema(description = "not an ignored comment")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-04-06T16:15:45.073+02:00[Europe/Ljubljana]")public class SystemDeviceTypeDTO {

  @SerializedName("dataSheet")
  private String dataSheet = null;

  @SerializedName("description")
  private String description = null;
  /**
   * Gets or Sets deviceType
   */
  @JsonAdapter(DeviceTypeEnum.Adapter.class)
  public enum DeviceTypeEnum {
    CONTROLLER("CONTROLLER"),
    CONFIGURABLE("CONFIGURABLE"),
    PASSIVE("PASSIVE"),
    SENSOR("SENSOR");

    private String value;

    DeviceTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DeviceTypeEnum fromValue(String text) {
      for (DeviceTypeEnum b : DeviceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DeviceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DeviceTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("deviceType")
  private DeviceTypeEnum deviceType = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;
  public SystemDeviceTypeDTO dataSheet(String dataSheet) {
    this.dataSheet = dataSheet;
    return this;
  }

  

  /**
  * Get dataSheet
  * @return dataSheet
  **/
  @Schema(description = "")
  public String getDataSheet() {
    return dataSheet;
  }
  public void setDataSheet(String dataSheet) {
    this.dataSheet = dataSheet;
  }
  public SystemDeviceTypeDTO description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * Get description
  * @return description
  **/
  @Schema(required = true, description = "")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public SystemDeviceTypeDTO deviceType(DeviceTypeEnum deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  

  /**
  * Get deviceType
  * @return deviceType
  **/
  @Schema(description = "")
  public DeviceTypeEnum getDeviceType() {
    return deviceType;
  }
  public void setDeviceType(DeviceTypeEnum deviceType) {
    this.deviceType = deviceType;
  }
  public SystemDeviceTypeDTO id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public SystemDeviceTypeDTO name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemDeviceTypeDTO systemDeviceTypeDTO = (SystemDeviceTypeDTO) o;
    return Objects.equals(this.dataSheet, systemDeviceTypeDTO.dataSheet) &&
        Objects.equals(this.description, systemDeviceTypeDTO.description) &&
        Objects.equals(this.deviceType, systemDeviceTypeDTO.deviceType) &&
        Objects.equals(this.id, systemDeviceTypeDTO.id) &&
        Objects.equals(this.name, systemDeviceTypeDTO.name);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(dataSheet, description, deviceType, id, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemDeviceTypeDTO {\n");
    
    sb.append("    dataSheet: ").append(toIndentedString(dataSheet)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
